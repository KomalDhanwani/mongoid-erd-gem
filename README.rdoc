= Mongoid-ERD 

Create model-diagram (ERD graph) via Graphviz using the mongoid's model source code.

Export a executable <tt>merd</tt>:

    $ merd | dot -Tpng > docs/erd.png

or:

    $ merd --model_dir=other/models | dot -Tpng > docs/erd.png

You can also create only a subset of models by:

    $ merd --include=Class1,Class2

or 

    $ merd --exclude=Class4,Class5

You need to add <tt>dot</tt> executable in your PATH.

= Class, Inherits and Fields

- <tt>class xxx:yyy</tt>: a record xxx inherit from yyy. The first class that contains <tt>include Mongoid::Document</tt> on the file will be tracked. yyy will be created as a <tt>box</tt> node if no corresponding file found.

- <tt>field :xxx, type:yyy</tt>: a field xxx with type yyy. <tt>type</tt> and <tt>default</tt> will be tracked.

- <tt>embeds_many/embeds_one/has_many/has_one :xxx, :as => :yyy</tt>: field and a belong_to/embeds_many/embeds_one/has_one link to xxx

- <tt>belongs_to/embedded_in :xxx</tt>: a field without link.

Methods before <tt>:private</tt> keyword will also be tracked.

= Special Markers

<tt>erd_tag user.core</tt> tag name of the current class (see configuration files below)

<tt>erd{}</tt>

<tt>class xxx:yyy # erd{fillcolor:xxx} yyy</tt>: yyy will become the label of the current class.

<tt>field ... # erd{...} xxx</tt>: xxx will become the label of that field.

<tt>embeds_many ... # erd{...} yyy</tt>: yyy will become the label of that edge.

<tt>erd -> node_name{color:yyy} label</tt>: arbitrage edge with attributes.

= Configuration Files

<tt>config/mongoid_erd.yml</tt>:

    user: {shape: Mrecord}
    user.core: {fillcolor: blue}

<tt>user.core</tt> attributes will be merged to <tt>user</tt>, then should be merged into <tt>class ... # erd{attrs}</tt>. Those attributes will passed to dot language as the attributes associate to the class node.

An other will to use tag is restrict output contains only classes with specific tag:

    $ merd --tags=user
